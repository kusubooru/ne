// Code generated by protoc-gen-go.
// source: ne.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	ne.proto

It has these top-level messages:
	Page
	User
	GetAllResponse
	LoginRequest
	LoginResponse
	RefreshRequest
	RefreshResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Page struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	PerPage int64 `protobuf:"varint,2,opt,name=per_page,json=perPage" json:"per_page,omitempty"`
	Limit   int64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset  int64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Page) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *Page) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Page) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type User struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetAllResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *GetAllResponse) Reset()                    { *m = GetAllResponse{} }
func (m *GetAllResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllResponse) ProtoMessage()               {}
func (*GetAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetAllResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type LoginRequest struct {
	Username     string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	PasswordHash string `protobuf:"bytes,2,opt,name=password_hash,json=passwordHash" json:"password_hash,omitempty"`
	DeviceName   string `protobuf:"bytes,3,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	IsMobile     bool   `protobuf:"varint,4,opt,name=is_mobile,json=isMobile" json:"is_mobile,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPasswordHash() string {
	if m != nil {
		return m.PasswordHash
	}
	return ""
}

func (m *LoginRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *LoginRequest) GetIsMobile() bool {
	if m != nil {
		return m.IsMobile
	}
	return false
}

type LoginResponse struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *LoginResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type RefreshRequest struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *RefreshRequest) Reset()                    { *m = RefreshRequest{} }
func (m *RefreshRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshRequest) ProtoMessage()               {}
func (*RefreshRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RefreshRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *RefreshRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type RefreshResponse struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *RefreshResponse) Reset()                    { *m = RefreshResponse{} }
func (m *RefreshResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshResponse) ProtoMessage()               {}
func (*RefreshResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RefreshResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *RefreshResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Page)(nil), "pb.Page")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*GetAllResponse)(nil), "pb.GetAllResponse")
	proto.RegisterType((*LoginRequest)(nil), "pb.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "pb.LoginResponse")
	proto.RegisterType((*RefreshRequest)(nil), "pb.RefreshRequest")
	proto.RegisterType((*RefreshResponse)(nil), "pb.RefreshResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	StreamAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (Users_StreamAllClient, error)
	GetAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) StreamAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (Users_StreamAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Users_serviceDesc.Streams[0], c.cc, "/pb.Users/StreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersStreamAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_StreamAllClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type usersStreamAllClient struct {
	grpc.ClientStream
}

func (x *usersStreamAllClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := grpc.Invoke(ctx, "/pb.Users/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	StreamAll(*Page, Users_StreamAllServer) error
	GetAll(context.Context, *Page) (*GetAllResponse, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_StreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Page)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).StreamAll(m, &usersStreamAllServer{stream})
}

type Users_StreamAllServer interface {
	Send(*User) error
	grpc.ServerStream
}

type usersStreamAllServer struct {
	grpc.ServerStream
}

func (x *usersStreamAllServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Users/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAll(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Users_GetAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAll",
			Handler:       _Users_StreamAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ne.proto",
}

// Client API for Auth service

type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/pb.Auth/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := grpc.Invoke(ctx, "/pb.Auth/Refresh", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Auth/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Auth_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ne.proto",
}

func init() { proto.RegisterFile("ne.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0xbd, 0x72, 0xd3, 0x40,
	0x10, 0x80, 0x91, 0x2d, 0x3b, 0xf2, 0xfa, 0x07, 0xb2, 0x61, 0x18, 0x23, 0x18, 0x08, 0x4a, 0x93,
	0x49, 0x61, 0x07, 0x53, 0x41, 0xe7, 0x2a, 0x14, 0xc0, 0x30, 0x02, 0x06, 0xa8, 0x34, 0x67, 0x7b,
	0x2d, 0xdd, 0x20, 0xeb, 0xc4, 0xdd, 0x39, 0xf4, 0xf4, 0x34, 0xf0, 0x68, 0xbc, 0x02, 0x0f, 0xc2,
	0xdc, 0xea, 0xe2, 0xb1, 0xfb, 0x74, 0xb7, 0x9f, 0xd7, 0xdf, 0xee, 0xdd, 0xae, 0x20, 0xaa, 0x68,
	0x52, 0x6b, 0x65, 0x15, 0xb6, 0xea, 0x45, 0xfc, 0x38, 0x57, 0x2a, 0x2f, 0x69, 0x2a, 0x6a, 0x39,
	0x15, 0x55, 0xa5, 0xac, 0xb0, 0x52, 0x55, 0xa6, 0xc9, 0x48, 0x96, 0x10, 0xbe, 0x17, 0x39, 0x21,
	0x42, 0x58, 0x8b, 0x9c, 0xc6, 0xc1, 0x69, 0x70, 0xde, 0x4e, 0xf9, 0x8c, 0x0f, 0x21, 0xaa, 0x49,
	0x67, 0xcc, 0x5b, 0xcc, 0x8f, 0x6a, 0xd2, 0x9c, 0x7e, 0x1f, 0x3a, 0xa5, 0xdc, 0x48, 0x3b, 0x6e,
	0x33, 0x6f, 0x02, 0x7c, 0x00, 0x5d, 0xb5, 0x5e, 0x1b, 0xb2, 0xe3, 0x90, 0xb1, 0x8f, 0x92, 0x0b,
	0x08, 0x3f, 0x19, 0xd2, 0x38, 0x82, 0x96, 0x5c, 0xf9, 0x12, 0x2d, 0xb9, 0x72, 0x45, 0x2b, 0xb1,
	0x69, 0xe4, 0xbd, 0x94, 0xcf, 0xc9, 0x25, 0x8c, 0xae, 0xc8, 0xce, 0xcb, 0x32, 0x25, 0x53, 0xab,
	0xca, 0x10, 0x3e, 0x81, 0xce, 0xd6, 0x90, 0x36, 0xe3, 0xe0, 0xb4, 0x7d, 0xde, 0x9f, 0x45, 0x93,
	0x7a, 0x31, 0x71, 0xba, 0xb4, 0xc1, 0xc9, 0xaf, 0x00, 0x06, 0x6f, 0x54, 0x2e, 0xab, 0x94, 0xbe,
	0x6f, 0xc9, 0x58, 0x8c, 0x21, 0x72, 0xbf, 0xb0, 0x3a, 0x60, 0xf5, 0x2e, 0xc6, 0x33, 0x18, 0xd6,
	0xc2, 0x98, 0x1f, 0x4a, 0xaf, 0xb2, 0x42, 0x98, 0xc2, 0xd7, 0x1e, 0xdc, 0xc0, 0xd7, 0xc2, 0x14,
	0xf8, 0x14, 0xfa, 0x2b, 0xba, 0x96, 0x4b, 0xca, 0xd8, 0xd1, 0xe6, 0x14, 0x68, 0xd0, 0x3b, 0x67,
	0x79, 0x04, 0x3d, 0x69, 0xb2, 0x8d, 0x5a, 0xc8, 0x92, 0xf8, 0xae, 0x51, 0x1a, 0x49, 0xf3, 0x96,
	0xe3, 0xe4, 0x33, 0x0c, 0x7d, 0x3b, 0xfe, 0x02, 0xcf, 0x60, 0x20, 0x96, 0x4b, 0x32, 0x26, 0xb3,
	0xea, 0x1b, 0x55, 0xbe, 0xa7, 0x7e, 0xc3, 0x3e, 0x3a, 0xe4, 0xda, 0xd2, 0xb4, 0xd6, 0x64, 0x0a,
	0x9f, 0xe3, 0xdb, 0xf2, 0x90, 0x93, 0x92, 0x2f, 0x30, 0x4a, 0x9b, 0xf8, 0xe6, 0xa6, 0xb7, 0x65,
	0xfe, 0x0a, 0x77, 0x77, 0xe6, 0xdb, 0x6d, 0x7a, 0x96, 0x43, 0xc7, 0x0d, 0xcb, 0xe0, 0x19, 0xf4,
	0x3e, 0x58, 0x4d, 0x62, 0x33, 0x2f, 0x4b, 0xe4, 0x21, 0xba, 0x4d, 0x8a, 0x77, 0xe3, 0x4c, 0xee,
	0x5c, 0x06, 0xf8, 0x12, 0xba, 0xcd, 0xf4, 0xf7, 0x32, 0xd0, 0x9d, 0x0e, 0x77, 0x22, 0x39, 0xfe,
	0xf9, 0xf7, 0xdf, 0x9f, 0x56, 0x1f, 0x7b, 0xd3, 0xeb, 0xe7, 0x53, 0x5e, 0x83, 0xd9, 0xef, 0x00,
	0xc2, 0xf9, 0xd6, 0x16, 0x38, 0x87, 0x0e, 0xbf, 0x3f, 0xde, 0x73, 0x7f, 0xdc, 0xdf, 0x8c, 0xf8,
	0x78, 0x8f, 0x78, 0xd3, 0x09, 0x9b, 0x86, 0x49, 0xe4, 0x4c, 0x62, 0x6b, 0x8b, 0x57, 0xc1, 0x05,
	0x5e, 0xc1, 0x91, 0x7f, 0x0f, 0xe4, 0xea, 0x87, 0xcf, 0x1e, 0x9f, 0x1c, 0xb0, 0x43, 0x51, 0xbc,
	0x2f, 0x5a, 0x74, 0xf9, 0x2b, 0x7b, 0xf1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x9b, 0xf0, 0x32,
	0x93, 0x03, 0x00, 0x00,
}
