// Code generated by protoc-gen-go.
// source: users.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Page struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	PerPage int64 `protobuf:"varint,2,opt,name=per_page,json=perPage" json:"per_page,omitempty"`
	Limit   int64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset  int64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Page) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *Page) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Page) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type User struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetAllResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *GetAllResponse) Reset()                    { *m = GetAllResponse{} }
func (m *GetAllResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllResponse) ProtoMessage()               {}
func (*GetAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetAllResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*Page)(nil), "pb.Page")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*GetAllResponse)(nil), "pb.GetAllResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	StreamAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (Users_StreamAllClient, error)
	GetAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) StreamAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (Users_StreamAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Users_serviceDesc.Streams[0], c.cc, "/pb.Users/StreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersStreamAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_StreamAllClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type usersStreamAllClient struct {
	grpc.ClientStream
}

func (x *usersStreamAllClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetAll(ctx context.Context, in *Page, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := grpc.Invoke(ctx, "/pb.Users/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	StreamAll(*Page, Users_StreamAllServer) error
	GetAll(context.Context, *Page) (*GetAllResponse, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_StreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Page)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).StreamAll(m, &usersStreamAllServer{stream})
}

type Users_StreamAllServer interface {
	Send(*User) error
	grpc.ServerStream
}

type usersStreamAllServer struct {
	grpc.ServerStream
}

func (x *usersStreamAllServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Users/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAll(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Users_GetAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAll",
			Handler:       _Users_StreamAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "users.proto",
}

func init() { proto.RegisterFile("users.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4a, 0xf4, 0x30,
	0x14, 0xc5, 0xbf, 0xfe, 0xfd, 0xa6, 0xb7, 0x30, 0xe0, 0x45, 0xa4, 0x0e, 0x22, 0x43, 0xdd, 0x0c,
	0x2e, 0xda, 0x71, 0x5c, 0xb9, 0x9c, 0x95, 0x5b, 0xa9, 0xb8, 0x96, 0xd4, 0xb9, 0x53, 0x02, 0x69,
	0x13, 0x92, 0xe8, 0x03, 0xf8, 0x0a, 0x3e, 0x9a, 0xaf, 0xe0, 0x83, 0x48, 0x6f, 0x8b, 0xe8, 0xee,
	0x9c, 0x1f, 0x27, 0xe7, 0x24, 0x81, 0xfc, 0xd5, 0x91, 0x75, 0x95, 0xb1, 0xda, 0x6b, 0x0c, 0x4d,
	0xbb, 0xba, 0xe8, 0xb4, 0xee, 0x14, 0xd5, 0xc2, 0xc8, 0x5a, 0x0c, 0x83, 0xf6, 0xc2, 0x4b, 0x3d,
	0xcc, 0x89, 0xf2, 0x05, 0xe2, 0x07, 0xd1, 0x11, 0x22, 0xc4, 0x46, 0x74, 0x54, 0x04, 0xeb, 0x60,
	0x13, 0x35, 0xac, 0xf1, 0x1c, 0x16, 0x86, 0xec, 0x33, 0xf3, 0x90, 0xf9, 0x7f, 0x43, 0x96, 0xe3,
	0xa7, 0x90, 0x28, 0xd9, 0x4b, 0x5f, 0x44, 0xcc, 0x27, 0x83, 0x67, 0x90, 0xea, 0xe3, 0xd1, 0x91,
	0x2f, 0x62, 0xc6, 0xb3, 0x2b, 0xaf, 0x21, 0x7e, 0x72, 0x64, 0x71, 0x09, 0xa1, 0x3c, 0xcc, 0x13,
	0xa1, 0x3c, 0x8c, 0xa3, 0x83, 0xe8, 0xa7, 0xf2, 0xac, 0x61, 0x5d, 0x6e, 0x61, 0x79, 0x4f, 0x7e,
	0xaf, 0x54, 0x43, 0xce, 0xe8, 0xc1, 0x11, 0x5e, 0x42, 0xc2, 0x6f, 0x2a, 0x82, 0x75, 0xb4, 0xc9,
	0x77, 0x8b, 0xca, 0xb4, 0xd5, 0x58, 0xd7, 0x4c, 0x78, 0xd7, 0x41, 0x32, 0x5a, 0x87, 0x57, 0x90,
	0x3d, 0x7a, 0x4b, 0xa2, 0xdf, 0x2b, 0x85, 0x1c, 0x1b, 0xef, 0xba, 0xfa, 0x39, 0x50, 0xfe, 0xdb,
	0x06, 0x78, 0x07, 0xe9, 0xd4, 0xff, 0x2b, 0x81, 0xa3, 0xfa, 0xbb, 0x5a, 0x9e, 0xbc, 0x7f, 0x7e,
	0x7d, 0x84, 0x39, 0x66, 0xf5, 0xdb, 0x4d, 0xcd, 0x43, 0x6d, 0xca, 0x5f, 0x76, 0xfb, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x21, 0x59, 0x89, 0x86, 0x63, 0x01, 0x00, 0x00,
}
